# Base image with CUDA support for GPU-enabled ML service
FROM nvidia/cuda:11.8.0-cudnn8-runtime-ubuntu22.04 as base

WORKDIR /app

# Install system dependencies
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
    python3 \
    python3-pip \
    python3-setuptools \
    python3-dev \
    build-essential \
    curl \
    gnupg \
    git \
    && rm -rf /var/lib/apt/lists/*

# Create symbolic links for python commands
RUN ln -sf /usr/bin/python3 /usr/bin/python && \
    ln -sf /usr/bin/pip3 /usr/bin/pip

# Python setup
ENV PYTHONUNBUFFERED=1 \
    PYTHONDONTWRITEBYTECODE=1 \
    PIP_NO_CACHE_DIR=1 \
    PIP_DISABLE_PIP_VERSION_CHECK=1

# Create a non-root user
RUN groupadd -g 1000 appuser && \
    useradd -u 1000 -g appuser -s /bin/bash -m appuser

# Copy requirements first for better caching
COPY ml/requirements.txt ./requirements.txt
RUN if [ -f ml/requirements-dev.txt ]; then cp ml/requirements-dev.txt ./requirements-dev.txt; fi

# Install Python dependencies with special attention to GPU compatibility
RUN pip install --no-cache-dir -r requirements.txt && \
    if [ -f requirements-dev.txt ]; then pip install --no-cache-dir -r requirements-dev.txt; fi

# Make sure flask and essential packages are explicitly installed
RUN pip install flask==2.3.0 flask-cors==4.0.0

# Install GPU-specific Python packages
RUN pip install --no-cache-dir torch torchvision torchaudio

# Copy application code
COPY . .

# Set proper permissions
RUN chown -R appuser:appuser /app

# Set environment variables
ENV PYTHONPATH=/app
ENV DEBUG=false
ENV NVIDIA_VISIBLE_DEVICES=all
ENV NVIDIA_DRIVER_CAPABILITIES=compute,utility

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:5000/health || exit 1

# Direct Python execution for GPU compatibility (avoids gunicorn issues)
CMD ["python", "/app/ml/app.py"]
